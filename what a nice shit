-- FE Minecraft Slime R6 -- V 0.0.2 Beta release --

-- This script is excellent for trolling! --

-- Credits: Generix/Generitto AKA Light_Ghostss 
-- Idea by Glitch Master/Elements AKA The Bacon Simulator

-- Controls --
--[[ 

    [W] = Automaticly Jumps by pressing W
    [P] = Anchor ur pet
    [T] = Unanchor ur pet
    [Q] = Puts ur pet in ur upperfront (useless keybind)
    [L] = Puts ur pet in original position (Behind u)
    [R] = Makes ur pet very loose and makes it spin around u (Could be fun)
    [C] = If ur pet is loose and spinning around this keybind puts it back how it was before (Press after R)
    [K] = Control ur pet (Needs fixing after pressing k u cant go back to original state)
    [E] = Destroys al keybindings and loops (Not needed cuz the same happens after resetting)

--]]

-- Hats --
--[[
    -- I'll update later --
    -- Look at Light_ghostss link:https://web.roblox.com/users/1615159094/profile Avatar --

    VANS_Umbrella
    BeachBall
    RoHead
    Crystall Staff
    Books2Accessory
    wINGIESS

--]]

-- Globals
_G.loop = true;
_G.wloop = true;
_G.Pet = false;
_G.w2loop = false;
_G.PetOn = false;
ct={}
te=table.insert

-- Locals

local plr = game:GetService("Players")
local lplr = plr.LocalPlayer
local char = plr.LocalPlayer.Character
local hum = char.Humanoid
local hat1;
local hat2;
local hat3;
local hat4;
local hat5;
local hat6;
local hat7;
local hat8;
local hat9;
local hat10;
local hatname1;
local hatname2;
local hatname3;
local hatname4;
local hatname5;
local hatname6;
local hatname7;
local hatname8;
local lp = game:GetService("Players").LocalPlayer
local rs = game:GetService("RunService")
local stepped = rs.Stepped
local heartbeat = rs.Heartbeat
local renderstepped = rs.RenderStepped
local sg = game:GetService("StarterGui")
local ws = game:GetService("Workspace")
local cf = CFrame.new
local v3 = Vector3.new
local v3_0 = v3(0, 0, 0)
local inf = math.huge

-- tool = char:WaitForChild("Foil") --Toolname
-- handle = tool:WaitForChild("Handle")


-- if handle:FindFirstChild("Mesh") then handle:FindFirstChild("Mesh"):Destroy() end


-- Blocky Character + Remove Mesh 

for i,v in pairs(char:GetChildren()) do
    -- if v.Name == "Left Arm" then v:Remove() end
    -- if v.Name == "Right Arm" then v:Remove() end
    -- if v.Name == "Left Leg" then v:Remove() end
    -- if v.Name == "Right Leg" then v:Remove() end
    if v.Name == "Head" then v:WaitForChild("face"):Destroy() end
    if v.Name == "Head" then v:WaitForChild("Mesh"):Destroy() end
    if v.Name == "Shirt Graphic" then v:Destroy() end
    if v.Name == "CharacterMesh" or v:IsA("CharacterMesh") then v:Destroy() end
end

for i,v in pairs(char:GetDescendants()) do
    if v:IsA("Accessory") and (v.Name ~= "RoHead" and v.Name ~= "Books2Accessory" and v.Name ~= "MeshPartAccessory" and v.Name ~= "wINGGIES" and v.Name ~= "Crystal Staff") then
        for k,p in pairs(v:GetDescendants()) do
            if p.Name == "Mesh" then
                p:Destroy()
            elseif p.Name == "SpecialMesh" then
                p:Destroy()
            end
        end
    end
end

-- Net Stuff

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- if not getgenv().Network then
-- 	getgenv().Network = {
-- 		BaseParts = {};
-- 		FakeConnections = {};
-- 		Connections = {};
-- 		Output = {
-- 			Enabled = true;
-- 			Prefix = "[NETWORK] ";
-- 			Send = function(Type,Output,BypassOutput)
-- 				if typeof(Type) == "function" and (Type == print or Type == warn or Type == error) and typeof(Output) == "string" and (typeof(BypassOutput) == "nil" or typeof(BypassOutput) == "boolean") then
-- 					if Network["Output"].Enabled == true or BypassOutput == true then
-- 						Type(Network["Output"].Prefix..Output);
-- 					end;
-- 				elseif Network["Output"].Enabled == true then
-- 					error(Network["Output"].Prefix.."Output Send Error : Invalid syntax.");
-- 				end;
-- 			end;
-- 		};
-- 		CharacterRelative = false;
-- 	}

-- 	Network["Output"].Send(print,": Loading.")
-- 	Network["Velocity"] = Vector3.new(14.46262424,14.46262424,14.46262424); --exactly 25.1 magnitude
-- 	Network["RetainPart"] = function(Part,ReturnFakePart) --function for retaining ownership of unanchored parts
-- 		assert(typeof(Part) == "Instance" and Part:IsA("BasePart") and Part:IsDescendantOf(workspace),Network["Output"].Prefix.."RetainPart Error : Invalid syntax: Arg1 (Part) must be a BasePart which is a descendant of workspace.")
-- 		assert(typeof(ReturnFakePart) == "boolean" or typeof(ReturnFakePart) == "nil",Network["Output"].Prefix.."RetainPart Error : Invalid syntax: Arg2 (ReturnFakePart) must be a boolean or nil.")
-- 		if not table.find(Network["BaseParts"],Part) then
-- 			if Network.CharacterRelative == true then
-- 				local Character = LocalPlayer.Character
-- 				if Character and Character.PrimaryPart then
-- 					local Distance = (Character.PrimaryPart.Position-Part.Position).Magnitude
-- 					if Distance > 1000 then
-- 						Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it is more than "..gethiddenproperty(LocalPlayer,"MaximumSimulationRadius").." studs away.")
-- 						return false
-- 					end
-- 				else
-- 					Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as the LocalPlayer Character's PrimaryPart does not exist.")
-- 					return false
-- 				end
-- 			end
-- 			table.insert(Network["BaseParts"],Part)
-- 			Part.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)
-- 			Network["Output"].Send(print,"PartOwnership Output : PartOwnership applied to BasePart "..Part:GetFullName()..".")
-- 			if ReturnFakePart == true then
-- 				return FakePart
-- 			end
-- 		else
-- 			Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it already active.")
-- 			return false
-- 		end
-- 	end

-- 	Network["RemovePart"] = function(Part) --function for removing ownership of unanchored part
-- 		assert(typeof(Part) == "Instance" and Part:IsA("BasePart"),Network["Output"].Prefix.."RemovePart Error : Invalid syntax: Arg1 (Part) must be a BasePart.")
-- 		local Index = table.find(Network["BaseParts"],Part)
-- 		if Index then
-- 			table.remove(Network["BaseParts"],Index)
-- 			Network["Output"].Send(print,"RemovePart Output: PartOwnership removed from BasePart "..Part:GetFullName()..".")
-- 		else
-- 			Network["Output"].Send(warn,"RemovePart Warning : BasePart "..Part:GetFullName().." not found in BaseParts table.")
-- 		end
-- 	end

-- 	Network["SuperStepper"] = Instance.new("BindableEvent") --make super fast event to connect to
-- 	for _,Event in pairs({RunService.Stepped,RunService.Heartbeat}) do
-- 		Event:Connect(function()
-- 			return Network["SuperStepper"]:Fire(Network["SuperStepper"],tick())
-- 		end)
-- 	end

-- 	Network["PartOwnership"] = {};
-- 	Network["PartOwnership"]["PreMethodSettings"] = {};
-- 	Network["PartOwnership"]["Enabled"] = false;
-- 	Network["PartOwnership"]["Enable"] = coroutine.create(function() --creating a thread for network stuff
-- 		if Network["PartOwnership"]["Enabled"] == false then
-- 			Network["PartOwnership"]["Enabled"] = true --do cool network stuff before doing more cool network stuff
-- 			Network["PartOwnership"]["PreMethodSettings"].ReplicationFocus = LocalPlayer.ReplicationFocus
-- 			LocalPlayer.ReplicationFocus = workspace
-- 			Network["PartOwnership"]["PreMethodSettings"].SimulationRadius = gethiddenproperty(LocalPlayer,"SimulationRadius")
-- 			Network["PartOwnership"]["Connection"] = Network["SuperStepper"].Event:Connect(function() --super fast asynchronous loop
-- 				sethiddenproperty(LocalPlayer,"SimulationRadius",1/0)
-- 				for _,Part in pairs(Network["BaseParts"]) do --loop through parts and do network stuff
-- 					coroutine.wrap(function()
-- 						if Part:IsDescendantOf(workspace) then
-- 							if Network.CharacterRelative == true then
-- 								local Character = LocalPlayer.Character;
-- 								if Character and Character.PrimaryPart then
-- 									local Distance = (Character.PrimaryPart.Position - Part.Position).Magnitude
-- 									if Distance > 1000 then
-- 										Network["Output"].Send(warn,"PartOwnership Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it is more than "..gethiddenproperty(LocalPlayer,"MaximumSimulationRadius").." studs away.")
-- 										Lost = true;
-- 										Network["RemovePart"](Part)
-- 									end
-- 								else
-- 									Network["Output"].Send(warn,"PartOwnership Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as the LocalPlayer Character's PrimaryPart does not exist.")
-- 								end
-- 							end
-- 							Part.Velocity = Network["Velocity"]+Vector3.new(0,math.cos(tick()*10)/100,0) --keep network by sending physics packets of 30 magnitude + an everchanging addition in the y level so roblox doesnt get triggered and fuck your ownership
-- 						else
-- 							Network["RemovePart"](Part)
-- 						end
-- 					end)()
-- 				end
-- 			end)
-- 			Network["Output"].Send(print,"PartOwnership Output : PartOwnership enabled.")
-- 		else
-- 			Network["Output"].Send(warn,"PartOwnership Output : PartOwnership already enabled.")
-- 		end
-- 	end)
-- 	Network["PartOwnership"]["Disable"] = coroutine.create(function()
-- 		if Network["PartOwnership"]["Connection"] then
-- 			Network["PartOwnership"]["Connection"]:Disconnect()
-- 			LocalPlayer.ReplicationFocus = Network["PartOwnership"]["PreMethodSettings"].ReplicationFocus
-- 			sethiddenproperty(LocalPlayer,"SimulationRadius",Network["PartOwnership"]["PreMethodSettings"].SimulationRadius)
-- 			Network["PartOwnership"]["PreMethodSettings"] = {}
-- 			for _,Part in pairs(Network["BaseParts"]) do
-- 				Network["RemovePart"](Part)
-- 			end
-- 			Network["PartOwnership"]["Enabled"] = false
-- 			Network["Output"].Send(print,"PartOwnership Output : PartOwnership disabled.")
-- 		else
-- 			Network["Output"].Send(warn,"PartOwnership Output : PartOwnership already disabled.")
-- 		end
-- 	end)
-- 	Network["Output"].Send(print,": Loaded.")
-- end

-- coroutine.resume(Network["PartOwnership"]["Enable"])


local v3_net, v3_808 = Vector3.new(0, 25.1, 0), Vector3.new(8, 0, 8)
		local function getNetlessVelocity(realPartVelocity)
			local mag = realPartVelocity.Magnitude
			if mag > 1 then
				local unit = realPartVelocity.Unit
				if (unit.Y > 0.25) or (unit.Y < -0.75) then
					return unit * (25.1 / unit.Y)
				end
			end 
			return v3_net + realPartVelocity * v3_808
		end


if _G.netted ~= true then
	_G.netted = true
	coroutine.wrap(function()
		settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
		settings().Physics.AllowSleep = false
		game:GetService("RunService").RenderStepped:Connect(function()
			game:FindFirstChildOfClass("Players").LocalPlayer.MaximumSimulationRadius=math.pow(math.huge,math.huge)
			sethiddenproperty(game:FindFirstChildOfClass("Players").LocalPlayer,"SimulationRadius",math.huge*math.huge)
		end)
	end)()
end

-- for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
-- if v:IsA("BasePart") and v.Name ~="HumanoidRootPart" then 
-- game:GetService("RunService").Heartbeat:connect(function()
-- v.Velocity = Vector3.new(0,35,0)
-- end)
-- end
-- end


-- Get Hats and Destroy Attachments

for i, v in pairs(hum:GetAccessories()) do
    --Network.RetainPart(v.Handle)
    if v.Name == "VANS_Umbrella" then hatname1 = v; hat1 = v.Handle; end
    if v.Name == "MeshPartAccessory" then hatname2 = v; hat2 = v.Handle; end
    if v.Name == "RoHead" then hatname3 = v; hat3 = v.Handle; end
    if v.Name == "Crystal Staff" then hatname4 = v; hat4 = v.Handle; end
    if v.Name == "Books2Accessory" then hatname5 = v; hat5 = v.Handle; end
    if v.Name == "wINGGIES" then hatname6 = v; hat6 = v.Handle; end
    if v.Name == "Lipstick_Bag_1.0" then hatname7 = v; hat7 = v.Handle; end
    if v.Name == "Lipstick_Bag_3.0" then hatname8 = v; hat8 = v.Handle; end
    if v.Name == "MeshPartAccessory" then hat9 = v.Handle; end
    if v.Name == "PlaneModel" then hat10 = v.Handle; end

    for i,v in pairs(char:GetDescendants()) do
        if v:IsA("Accessory") then
            --ghandle.AccessoryWeld:Destroy()
            --hat2.AccessoryWeld:Destroy()
            --hat3.AccessoryWeld:Destroy()
            if v.Handle:FindFirstChildOfClass("Attachment") then
                v.Handle:FindFirstChildOfClass("Attachment"):Destroy()
                if v.Handle:FindFirstChild("AccessoryWeld") then
                    v.Handle:FindFirstChild("AccessoryWeld"):Destroy()
                end
            end

            if v.Handle:FindFirstChild("Attachment") then v.Handle:FindFirstChild("Attachment"):Destroy() end
        end
    end
end


-- Align Functions (Hat Attachments to parts)
local function align(Part0, Part1, Rotation, apos, ares, res)
	Part0.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0.0001, 0.0001, 0.0001, 0.0001)

	local att0 = Instance.new("Attachment", Part0)
	att0.Orientation = v3_0
	att0.Position = v3_0
	att0.Name = "att0_" .. Part0.Name
	local att1 = Instance.new("Attachment", Part1)
	att1.Orientation = v3_0
	att1.Position = v3_0
	att1.Name = "att1_" .. Part1.Name
    if apos then
        local apd = Instance.new("AlignPosition", att0)
        apd.ApplyAtCenterOfMass = false
        apd.MaxForce = inf
        apd.MaxVelocity = inf
        apd.ReactionForceEnabled = false
        apd.Responsiveness = ares
        apd.Attachment1 = att1
        apd.Attachment0 = att0
        apd.Name = "AlignPositionRfalse"
        apd.RigidityEnabled = false
    end
	
    if Rotation then
        local ao = Instance.new("AlignOrientation", att0)
        ao.MaxAngularVelocity = inf
        ao.MaxTorque = inf
        ao.PrimaryAxisOnly = false
        ao.ReactionTorqueEnabled = false
        ao.Responsiveness = res
        ao.Attachment1 = att1
        ao.Attachment0 = att0
        ao.RigidityEnabled = false
        ao.Name = "AlignOrientationMODE"
    end

	if type(getNetlessVelocity) == "function" then
	    local realVelocity = v3_0
        local steppedcon = stepped:Connect(function()
            Part0.Velocity = realVelocity
        end)
        local heartbeatcon = heartbeat:Connect(function()
            realVelocity = Part0.Velocity
            Part0.Velocity = getNetlessVelocity(realVelocity)
        end)
        Part0.Destroying:Connect(function()
            Part0 = nil
            steppedcon:Disconnect()
            heartbeatcon:Disconnect()
        end)
    end
end

function Orientation(att0, att1)
    if not hat2:FindFirstChildOfClass("AlignOrientation") then
        local ao = Instance.new("AlignOrientation", att0)
        ao.MaxAngularVelocity = inf
        ao.MaxTorque = inf
        ao.PrimaryAxisOnly = false
        ao.ReactionTorqueEnabled = false
        ao.Responsiveness = 1
        ao.Attachment1 = att1
        ao.Attachment0 = att0
        ao.RigidityEnabled = false
        ao.Name = "AlignOrientationMODE"
    end
end

function Orientation2(att0, att1)
    if not hat2:FindFirstChildOfClass("AlignOrientation") then
        local ao = Instance.new("AlignOrientation", att0)
        ao.MaxAngularVelocity = inf
        ao.MaxTorque = inf
        ao.PrimaryAxisOnly = false
        ao.ReactionTorqueEnabled = false
        ao.Responsiveness = 200
        ao.Attachment1 = att1
        ao.Attachment0 = att0
        ao.RigidityEnabled = false
        ao.Name = "AlignOrientationMODE_pet"
    end
end

-- Align process
-- align(hat1, char.Head, true, true, 200,200) -- VANS_Umbrella
align(hat2, char["Torso"], true, true, 50, 0) -- BeachBall
-- align(hat3, char["Head"], true, true, 200, 200) -- RoHead
-- align(hat4, hat2, false, true , 100, 100) -- Crystal Staff
-- align(hat5, hat2, true, true, 200, 200) -- Book2Accessory
-- align(hat6, hat2, true, true , 200, 200) -- wINGIESS
-- align(hat7, char["Torso"], true, true, 50, 0) -- bag 1.0
-- align(hat8, char["Torso"], true, true, 50, 0) -- bag 2.0
-- align(hat9, hat7, true, true, 50, 0) -- MeshPart 
-- align(hat10, hat2, true, true, 50, 0)


-- --att2.Parent = char["Torso"]
-- local att1 = hat1["att0_Handle"] 
-- att1.Position = Vector3.new(0, -0, 1)
-- att1.Rotation = Vector3.new(90, 0, 0)

local att2 = hat2["att0_Handle"]
--att2.Parent = char["Torso"]
att2.Position = Vector3.new(0, 6, 0)
att2.Rotation = Vector3.new(90, 0, 0)


-- hat4.Velocity = Vector3.new(110,100,110)

-- local att3 = hat3["att0_Handle"]
-- att3.Position = Vector3.new(0, -3, 0)
-- att3.Rotation = Vector3.new(0, 0, 0)

-- local att4 = hat4["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att4.Position = Vector3.new(-4.5, -0, 0)
-- att4.Rotation = Vector3.new(90, 0, 0)

-- local att5 = hat5["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att5.Position = Vector3.new(0, -1.5, 0)
-- att5.Rotation = Vector3.new(0, 0, 0)

-- local att6 = hat6["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att6.Position = Vector3.new(0, -1.5, 0)
-- att6.Rotation = Vector3.new(-90, 0, 0)

-- local att7 = hat7["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att7.Position = Vector3.new(6, 0, 0)
-- att7.Rotation = Vector3.new(90, 0, 0)

-- local att8 = hat8["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att8.Position = Vector3.new(-6, 0, 0)
-- att8.Rotation = Vector3.new(90, 0, 0)

-- local att9 = hat9["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att9.Position = Vector3.new(0, 0, 3)
-- att9.Rotation = Vector3.new(90, 0, 0)

-- local att10 = hat10["att0_Handle"]
-- --att2.Parent = char["Torso"]
-- att10.Position = Vector3.new(0, 6, 0)
-- att10.Rotation = Vector3.new(90, 0, 0)

UIS = game:GetService("UserInputService")
--oldpos = swordh.CFrame

q = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.Q and not Chat then
        for i= 0,1,.01 do
            task.wait()
            -- att2.CFrame = att2.CFrame:Lerp(CFrame.new(15,-4,-10), i)
            --att2.CFrame = att2.CFrame:Lerp(CFrame.new(2,-0,-0), i)
            att2.CFrame = att2.CFrame:Lerp(CFrame.new(0,-7, -6), i)
            att2.Rotation = v3(90,0,0)
        end
        Orientation(att2, char["Torso"]:FindFirstChild("att1_Torso"))
        --att2.Position = nil
    end
end)
 

        

-- wait(3) -- explode thingy
-- humRootPart = char.HumanoidRootPart
-- local bodyPos = Instance.new("BodyPosition", hat2)
-- bodyPos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)

-- local bodyGyro = Instance.new("BodyGyro", hat2)
-- bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)

-- while _G.loop do
--     wait()
--     bodyPos.Position = humRootPart.Position + Vector3.new(2, 2, 3)
--     bodyGyro.CFrame = humRootPart.CFrame
-- end


-- local TweenService = game:GetService("TweenService")

-- local tweenInfo = TweenInfo.new(
-- 	1, -- Time
-- 	Enum.EasingStyle.Sine, -- EasingStyle
-- 	Enum.EasingDirection.Out, -- EasingDirection
-- 	0, -- RepeatCount (when less than zero the tween will loop indefinitely)
-- 	true, -- Reverses (tween will reverse once reaching it's goal)
-- 	0 -- DelayTime
-- )

-- local tween = TweenService:Create(hat2, tweenInfo, { Position = hat1.Position + Vector3.new(0,0,-5), Rotation = Vector3.new(91, 0, 0)})

-- tween:Play()
--task.wait(10)
--tween:Cancel() -- cancel the animation after 10 seconds


-- q = UIS.InputBegan:Connect(function(input, Chat)   -- UNDER MODERATION
--     if input.KeyCode == Enum.KeyCode.Q and not Chat then
--         -- for i= 0.1,.1 do
--         --     wait()
--         --     att2.CFrame = att2.CFrame:Lerp(CFrame.new(15,4,15), i)
--         -- end
--         Orientation(att2, char["Torso"]:FindFirstChild("att1_Torso"))
--         --att2.Position = nil
--         for i= 0,1,.01 do
--             wait()
--             if hat2.CFrame == hat2.CFrame*CFrame.new(0,0,-4) then
--                 return
--             else
--                 att2.Position = att2.CFrame.p:Lerp(hat2.CFrame.p*CFrame.new(0,0,-4).p, i)
--             end
--         end
--     end
-- end)

c = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.C and not Chat then
        -- for i= 0.1,.1 do
        --     wait()
        --     att2.CFrame = att2.CFrame:Lerp(CFrame.new(15,4,15), i)
        -- end
        Orientation(att2, char["Torso"]:FindFirstChild("att1_Torso"))
        
        -- for i= 0,1,.01 do
        --     wait(0.1)
        --     att2.CFrame = att2.CFrame:Lerp(hat2.CFrame+CFrame.new(0,0,0.1), i)
        -- end
        att2.Position = nil
    end
end)

p = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.P and not Chat then
        hat2.Anchored = true
    end
end)

f = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.F and not Chat then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/0Ben1/fe./main/L"))()
    end
end)

t = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.T and not Chat then
        hat2.Anchored = false
    end
end)

r = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.R and not Chat then
        for i,v in pairs(hat2.att0_Handle:GetDescendants()) do
            if v:IsA("AlignOrientation") then
                v:Destroy()
            end
        end
    end
end)

e = UIS.InputBegan:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.E and not Chat then
        q:Disconnect()
        p:Disconnect()
        t:Disconnect()
        e:Disconnect()
        r:Disconnect()
        c:Disconnect()
        l:Disconnect()
        Wb:Disconnect()
        We:Disconnect()
        --anim:Disconnect()
        --lol:Disconnect()
    end
end)


-- tried to make it come from the ground and look like ground particles (this only makes the particle close up when jump and revert to original pos when not jumping)

-- spawn(function()
--     while _G.loop do
--         wait()
--         if hum.Jump then
--             oldpos = att4.Position
--             att4.Position = att4.Position:Lerp(v3(0,-5, 0), .5)
--             wait(2)
--             att4.Position = oldpos
--         end
--     end
-- end)

-- local hat2 = gp(cplayer, "Pink Hair", "Accessory")
-- local handle2 = gp(hat2, "Handle", "BasePart")
-- local att2 = gp(handle2, "att1_Handle", "Attachment")
-- att2.Parent = cplayer["Left Arm"]
-- att2.Position = Vector3.new(0, -0, 0)
-- att2.Rotation = Vector3.new(90, 0, 0)

-- local hat2 = gp(cplayer, "Kate Hair", "Accessory")
-- local handle2 = gp(hat2, "Handle", "BasePart")
-- local att2 = gp(handle2, "att1_Handle", "Attachment")
-- att2.Parent = cplayer["Right Arm"]
-- att2.Position = Vector3.new(-0, -0, 0)
-- att2.Rotation = Vector3.new(90, 0, 0) --LavanderHair

-- local hat2 = gp(cplayer, "LavanderHair", "Accessory")
-- local handle2 = gp(hat2, "Handle", "BasePart")
-- local att2 = gp(handle2, "att1_Handle", "Attachment")
-- att2.Parent = cplayer["Right Leg"]
-- att2.Position = Vector3.new(0, 0, 0) --Robloxclassicred
-- att2.Rotation = Vector3.new(90, 0, 0)

-- local hat2 = gp(cplayer, "Robloxclassicred", "Accessory")
-- local handle2 = gp(hat2, "Handle", "BasePart")
-- local att2 = gp(handle2, "att1_Handle", "Attachment")
-- att2.Parent = cplayer["Left Leg"]
-- att2.Position = Vector3.new(-0, 0, 0) 
-- att2.Rotation = Vector3.new(90, 0, 0)


spawn(function()
    char.AncestryChanged:wait()--if you respawn, it will stop the  loop to avoid lag of using it over and over
    _G.loop = false 
    q:Disconnect()
    p:Disconnect()
    t:Disconnect()
    e:Disconnect()
    r:Disconnect()
    l:Disconnect()
    k:Disconnect()
    c:Disconnect()
    Wb:Disconnect()
    We:Disconnect()
    --anim:Disconnect()
    --lol:Disconnect()
end)
for i,v in pairs (char:GetChildren()) do
	if v:IsA("Accessory") then
		v.Handle.Massless = true
		v.Handle.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)
	end
end

-- AutoJump

-- Wb = UIS.InputBegan:Connect(function(input, Chat)
--     if input.KeyCode == Enum.KeyCode.W and not Chat then
--         if _G.PetOn then
--             _G.w2loop = true;
--             while _G.w2loop do
--                 wait(.1)
--                 rig.Humanoid.Jump = true
--                 rig.Humanoid.Jump = 60
--                 game.Workspace.Gravity = 98
--             end
--         else
--             _G.w2loop = false
--             _G.wloop = true;
--             while _G.wloop do
--                 wait(.1)
--                 game.Players.LocalPlayer.Character.Humanoid.Jump = true
--                 game.Players.LocalPlayer.Character.Humanoid.Jump = 60
--                 game.Workspace.Gravity = 98
--             end
--         end
--     end
-- end)


-- We = UIS.InputEnded:Connect(function(input, Chat)
--     if input.KeyCode == Enum.KeyCode.W and not Chat then
--         _G.wloop = false;
--         _G.w2loop = false;

--         game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
--         if not rig then
--         else
--             rig.Humanoid.Jump = true
--         end
       
--         game.Workspace.Gravity = 192
--     end
-- end)

hum.HipHeight = 0.5
-- hat1.CanCollide = true
k = UIS.InputEnded:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.K and not Chat then
        _G.PetOn = not _G.PetOn

        if _G.PetOn then


            local RS = game:GetService("RunService");

            local player = game:GetService("Players");
            local lplayer = player.LocalPlayer;

            local char = lplayer.Character;
            local hum = char:FindFirstChild("Humanoid");

            local children = char:GetChildren();
            local descendants = char:GetDescendants();

            -- if hum.RigType == Enum.HumanoidRigType.R6 then
            --     r6 = true;
            --     for i,v in pairs(descendants) do
            --         if v.ClassName  == "Motor6D" and v.Name ~= "Waist" and v.Name ~= "Neck" then v:Remove(); end
            --     end
            -- end

            char:WaitForChild("Animate").Disabled = true;
            char.Archivable = true;
            rig = game:GetObjects("rbxassetid://5195737219")[1];
            rig.Parent  = char;
            rig.Name = "Generix"

            rig.HumanoidRootPart.Anchored = false;
            workspace.CurrentCamera.CameraSubject = rig;

            rig.HumanoidRootPart.CFrame = char.HumanoidRootPart.CFrame;

            function connect(p,rigp)
                --p:ApplyImpulse(Vector3.new(0,50,0));
                -- p.Velocity = Vector3.new(0,35,0);
                p.CFrame = rigp.CFrame;
            end

            Noclip = RS.Stepped:Connect(function()
                for i, v in pairs(children) do
                    if v:IsA("BasePart") then v.CanCollide = false; end
                end
            end)

            ConnectLoop = RS.Heartbeat:Connect(function() 
                if not rig then
                    ConnectLoop:Disconnect()
                    Noclip:Disconnect()
                end

                rig.Humanoid.Jump = hum.Jump
                rig.Humanoid:Move(hum.MoveDirection)

                connect(char["Torso"],rig["Torso"]);
            end)

            --rig.Humanoid.HipHeight = 0

            charAnim = char.Animate:Clone();
            charAnim.Parent = rig;
            charAnim.Disabled = false;


            game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 0
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = 0

            
            for i,v in pairs(rig.Humanoid:GetAccessories()) do
                v:Destroy()
            end
            -- rig.Humanoid.WalkSpeed = 16
            -- rig.Humanoid.JumpPower = 50
            for i,v in pairs(hat2.att0_Handle:GetDescendants()) do
                if v:IsA("AlignOrientation") then
                    v:Destroy()
                end
            end

            for i,v in pairs(char:GetDescendants()) do
                if v:IsA("Accessory") and v.Name == "MeshPartAccessory" then
                    --ghandle.AccessoryWeld:Destroy()
                    --hat2.AccessoryWeld:Destroy()
                    --hat3.AccessoryWeld:Destroy()
                    if v.Handle:FindFirstChildOfClass("Attachment") then
                        v.Handle:FindFirstChildOfClass("Attachment"):Destroy()
                        if v.Handle:FindFirstChild("AccessoryWeld") then
                            v.Handle:FindFirstChild("AccessoryWeld"):Destroy()
                        end
                    end
        
                    --if v.Handle:FindFirstChild("Attachment") then v.Handle:FindFirstChild("Attachment"):Destroy() end
                end
                if v.Name == "att1_Torso" then
                    v:Destroy();
                end
            end
            align(hat2, rig["Torso"], true, true, 200, 200) 
            hat2.att0_Handle.Position = Vector3.new(0, 0, 0)
            hat2.att0_Handle.Rotation = Vector3.new(90, 0, 0)

            _G.wloop = false;
            _G.Pet = true;
        else
            _G.PetOn = false;
            _G.Pet = false;
            
            rig.HumanoidRootPart.Anchored = true
            rig.Humanoid.WalkSpeed = 0
            rig.Humanoid.JumpPower = 0

            --att2.Position = char.HumanoidRootPart.CFrame.p; -- need to look into it

            for i,v in pairs(hat2.att0_Handle:GetDescendants()) do
                if v:IsA("AlignOrientation") then
                    v:Destroy()
                end
            end
            hat2.Anchored = true
            -- hat1.Anchored = true
            for i,v in pairs(char:GetDescendants()) do
                if v:IsA("Accessory") and v.Name == "MeshPartAccessory" then
                    --ghandle.AccessoryWeld:Destroy()
                    --hat2.AccessoryWeld:Destroy()
                    --hat3.AccessoryWeld:Destroy()
                    if v.Handle:FindFirstChildOfClass("Attachment") then
                        v.Handle:FindFirstChildOfClass("Attachment"):Destroy()
                        if v.Handle:FindFirstChild("AccessoryWeld") then
                            v.Handle:FindFirstChild("AccessoryWeld"):Destroy()
                        end
                    end
        
                    --if v.Handle:FindFirstChild("Attachment") then v.Handle:FindFirstChild("Attachment"):Destroy() end
                end
                if v.Name == "att1_Torso" then
                    v:Destroy();
                end
                if v.Name == "att0_Handle" then
                    v:Destroy();
                end
            end
            for i,v in pairs(rig:GetDescendants()) do
                if v:IsA("Accessory") then
                    --ghandle.AccessoryWeld:Destroy()
                    --hat2.AccessoryWeld:Destroy()
                    --hat3.AccessoryWeld:Destroy()
                    if v.Handle:FindFirstChildOfClass("Attachment") then
                        v.Handle:FindFirstChildOfClass("Attachment"):Destroy()
                        if v.Handle:FindFirstChild("AccessoryWeld") then
                            v.Handle:FindFirstChild("AccessoryWeld"):Destroy()
                        end
                    end
        
                    --if v.Handle:FindFirstChild("Attachment") then v.Handle:FindFirstChild("Attachment"):Destroy() end
                end
                if v.Name == "att1_Torso" then
                    v:Destroy();
                end
                if v.Name == "att0_Handle" then
                    v:Destroy();
                end
            end

            align(hat2, char["Torso"], true, true, 50, 0)
            --local att2 = hat2["att0_Handle"]
            --att2.Parent = char["Torso"]
            hat2.att0_Handle.Position = Vector3.new(0, 6, 0)
            hat2.att0_Handle.Rotation = Vector3.new(90, 0, 0)

            game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
            
            ConnectLoop:Disconnect()
            Noclip:Disconnect()
            rig:Destroy()
            workspace.CurrentCamera.CameraSubject = char;

            hat2.Anchored = false
            -- hat1.Anchored = false
        --Orientation2(att2, rig["Torso"]:FindFirstChild("att1_Torso"))
        end
    end
end)

l = UIS.InputEnded:Connect(function(input, Chat)
    if input.KeyCode == Enum.KeyCode.L and not Chat then
        local att2 = hat2["att0_Handle"]
        att2.Position = Vector3.new(0, 6, 0)
        att2.Rotation = Vector3.new(90, 0, 0)

    end
end)

-- Animation pet
spawn(function()
    while _G.loop do
        wait(0.1)
        local v = hat2.Position
        for i = 1,5 do
            wait(0.1)
            att2.Position = att2.Position + Vector3.new(0,0,1/10)
        end
        for i = 4,1,-1 do
            wait(0.1)
            att2.Position = att2.Position + Vector3.new(0,0,1/10)
        end
        for i = 1,5 do
            wait(0.1)
            att2.Position = att2.Position + Vector3.new(0,0,-1/10)
        end
        for i = 4,1,-1 do
            wait(0.1)
            att2.Position = att2.Position + Vector3.new(0,0,-1/10)
        end
        --hat2.Position = v
    end
end)

-- spawn(function()
--     while _G.loop do
--         wait(0.1)
--         local v = hat7.Position
--         for i = 1,5 do
--             wait(0.1)
--             att7.Position = att7.Position + Vector3.new(0,0,1/10)
--         end
--         for i = 4,1,-1 do
--             wait(0.1)
--             att7.Position = att7.Position + Vector3.new(0,0,1/10)
--         end
--         for i = 1,5 do
--             wait(0.1)
--             att7.Position = att7.Position + Vector3.new(0,0,-1/10)
--         end
--         for i = 4,1,-1 do
--             wait(0.1)
--             att7.Position = att7.Position + Vector3.new(0,0,-1/10)
--         end
--         --hat2.Position = v
--     end
-- end)

-- spawn(function()
--     while _G.loop do
--         wait(0.1)
--         local v = att8.Position
--         for i = 1,5 do
--             wait(0.1)
--             att8.Position = att8.Position + Vector3.new(0,0,1/10)
--         end
--         for i = 4,1,-1 do
--             wait(0.1)
--             att8.Position = att8.Position + Vector3.new(0,0,1/10)
--         end
--         for i = 1,5 do
--             wait(0.1)
--             att8.Position = att8.Position + Vector3.new(0,0,-1/10)
--         end
--         for i = 4,1,-1 do
--             wait(0.1)
--             att8.Position = att8.Position + Vector3.new(0,0,-1/10)
--         end
--         --hat2.Position = v
--     end
-- end)

game:GetService("RunService").Heartbeat:Connect(function()
    for i,v in pairs(hum:GetAccessories()) do
        if v.Handle.Position == workspace.FallenPartsDestroyHeight then 
            oldpos = char.HumanoidRootPart.Position
            char.HumanoidRootPart.Position = v.Position
            char.HumanoidRootPart.Position = oldpos
            v.Position = oldpos
        end
    end
end)


-- local distance = 7

-- local Pet1 = hat2
-- local Follower = char.HumanoidRootPart

-- local RunService = game:GetService("RunService")
-- spawn(function()
--         lol = RunService.Heartbeat:Connect(function()
--             if _G.loop == false then return end
--             Pet1.CFrame = Follower.CFrame*CFrame.new(0, 0, distance)
--             Pet1.CFrame = CFrame.new(Pet1.CFrame.X, Pet1.CFrame.Y, Pet1.CFrame.Z)
--             task.wait()
--         end)
-- end)

game:GetService("StarterGui"):SetCore("SendNotification", { 
    Title = "FE Slime";
    Text = "Have Enjoy Fun";
    Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
Duration = 16;


game:GetService("StarterGui"):SetCore("SendNotification", { 
    Title = "İdea: Thebacon";
    Text = "Credits:Generix/Generitto AKA Light_Ghostss";
    Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
Duration = 16;


game:GetService("StarterGui"):SetCore("SendNotification", { 
    Title = "dont steal";
    Text = "NOFİCATİON";
    Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
Duration = 16;
